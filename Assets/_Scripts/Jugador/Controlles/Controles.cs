//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/_Scripts/Jugador/Controlles/Controles.inputActions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/_Scripts/Jugador/Controlles/Controles.inputActions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Controles: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Controles()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controles"",
    ""maps"": [
        {
            ""name"": ""Jugador"",
            ""id"": ""1cb0dd92-121d-4e7b-89ee-228ccdbe1423"",
            ""actions"": [
                {
                    ""name"": ""BotonDash"",
                    ""type"": ""Button"",
                    ""id"": ""fa51c3d7-6acd-4e7d-911a-1cb5eee645e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""fecb8c99-13b1-45cd-9504-336d16c5460a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interactuar"",
                    ""type"": ""Button"",
                    ""id"": ""5a4a35ed-4346-4182-86e8-4343e38f366a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ataque"",
                    ""type"": ""Button"",
                    ""id"": ""f2e362c0-919a-41f2-831d-ccf0024207c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LargaDistancia"",
                    ""type"": ""Button"",
                    ""id"": ""fabaa554-7662-407d-b937-484d4fb7b7ee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Giratorio"",
                    ""type"": ""Button"",
                    ""id"": ""26da0530-3e0f-486b-8493-a7899c92929b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Direccion"",
                    ""type"": ""Value"",
                    ""id"": ""20093baf-5142-4159-9571-0042bc4be7d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BotonEscape"",
                    ""type"": ""Button"",
                    ""id"": ""37c18287-16fb-4125-a8ba-45afd671af67"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b051edbf-a7ea-45ae-ae36-b20e6eae5f6c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BotonDash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3256fda-b80c-4532-a613-0bde1aa3cf09"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BotonDash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9ec8352d-3c92-4527-ad25-244f42e3248a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3f55ad0c-41d3-4b2c-a1c9-96f2de3cd4ca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e6304d9-3058-4da1-8a42-4f4bcc3766a7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0da7c353-2ab5-4593-92e8-1f62e0371fc0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b30b4366-f8a0-4b2c-961b-446bff8c08bb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0cba2724-27c5-4574-ba61-127e1da340d1"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55a4144e-c7fc-4679-9a77-106696a08b2a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de355bc2-3ae7-46a9-a518-336575c31ba4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5aae0156-4462-4ed7-80d0-cf75d6a44878"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edd4ccd0-d832-40cb-8b6b-6ea9f9e146ce"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14b2f7cb-227d-4f12-857b-064964c4f8cc"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85237895-e6a2-4252-a7fd-33bb1eafe23f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LargaDistancia"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""039cb779-2a8a-4cc0-97a6-e4a8e9a48d03"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LargaDistancia"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c942be9-4360-414c-b139-abc8237cf0b7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Giratorio"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a98fa29b-62c5-49ee-8ba4-404c0d1bee76"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Giratorio"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e041cac-3c0e-4c72-87e6-744ab2bb22f7"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direccion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b23d12d-97e9-4f1b-aaa4-e075c7d63d65"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BotonEscape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Jugador
        m_Jugador = asset.FindActionMap("Jugador", throwIfNotFound: true);
        m_Jugador_BotonDash = m_Jugador.FindAction("BotonDash", throwIfNotFound: true);
        m_Jugador_Mover = m_Jugador.FindAction("Mover", throwIfNotFound: true);
        m_Jugador_Interactuar = m_Jugador.FindAction("Interactuar", throwIfNotFound: true);
        m_Jugador_Ataque = m_Jugador.FindAction("Ataque", throwIfNotFound: true);
        m_Jugador_LargaDistancia = m_Jugador.FindAction("LargaDistancia", throwIfNotFound: true);
        m_Jugador_Giratorio = m_Jugador.FindAction("Giratorio", throwIfNotFound: true);
        m_Jugador_Direccion = m_Jugador.FindAction("Direccion", throwIfNotFound: true);
        m_Jugador_BotonEscape = m_Jugador.FindAction("BotonEscape", throwIfNotFound: true);
    }

    ~@Controles()
    {
        UnityEngine.Debug.Assert(!m_Jugador.enabled, "This will cause a leak and performance issues, Controles.Jugador.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Jugador
    private readonly InputActionMap m_Jugador;
    private List<IJugadorActions> m_JugadorActionsCallbackInterfaces = new List<IJugadorActions>();
    private readonly InputAction m_Jugador_BotonDash;
    private readonly InputAction m_Jugador_Mover;
    private readonly InputAction m_Jugador_Interactuar;
    private readonly InputAction m_Jugador_Ataque;
    private readonly InputAction m_Jugador_LargaDistancia;
    private readonly InputAction m_Jugador_Giratorio;
    private readonly InputAction m_Jugador_Direccion;
    private readonly InputAction m_Jugador_BotonEscape;
    /// <summary>
    /// Provides access to input actions defined in input action map "Jugador".
    /// </summary>
    public struct JugadorActions
    {
        private @Controles m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public JugadorActions(@Controles wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Jugador/BotonDash".
        /// </summary>
        public InputAction @BotonDash => m_Wrapper.m_Jugador_BotonDash;
        /// <summary>
        /// Provides access to the underlying input action "Jugador/Mover".
        /// </summary>
        public InputAction @Mover => m_Wrapper.m_Jugador_Mover;
        /// <summary>
        /// Provides access to the underlying input action "Jugador/Interactuar".
        /// </summary>
        public InputAction @Interactuar => m_Wrapper.m_Jugador_Interactuar;
        /// <summary>
        /// Provides access to the underlying input action "Jugador/Ataque".
        /// </summary>
        public InputAction @Ataque => m_Wrapper.m_Jugador_Ataque;
        /// <summary>
        /// Provides access to the underlying input action "Jugador/LargaDistancia".
        /// </summary>
        public InputAction @LargaDistancia => m_Wrapper.m_Jugador_LargaDistancia;
        /// <summary>
        /// Provides access to the underlying input action "Jugador/Giratorio".
        /// </summary>
        public InputAction @Giratorio => m_Wrapper.m_Jugador_Giratorio;
        /// <summary>
        /// Provides access to the underlying input action "Jugador/Direccion".
        /// </summary>
        public InputAction @Direccion => m_Wrapper.m_Jugador_Direccion;
        /// <summary>
        /// Provides access to the underlying input action "Jugador/BotonEscape".
        /// </summary>
        public InputAction @BotonEscape => m_Wrapper.m_Jugador_BotonEscape;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Jugador; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="JugadorActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(JugadorActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="JugadorActions" />
        public void AddCallbacks(IJugadorActions instance)
        {
            if (instance == null || m_Wrapper.m_JugadorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JugadorActionsCallbackInterfaces.Add(instance);
            @BotonDash.started += instance.OnBotonDash;
            @BotonDash.performed += instance.OnBotonDash;
            @BotonDash.canceled += instance.OnBotonDash;
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
            @Interactuar.started += instance.OnInteractuar;
            @Interactuar.performed += instance.OnInteractuar;
            @Interactuar.canceled += instance.OnInteractuar;
            @Ataque.started += instance.OnAtaque;
            @Ataque.performed += instance.OnAtaque;
            @Ataque.canceled += instance.OnAtaque;
            @LargaDistancia.started += instance.OnLargaDistancia;
            @LargaDistancia.performed += instance.OnLargaDistancia;
            @LargaDistancia.canceled += instance.OnLargaDistancia;
            @Giratorio.started += instance.OnGiratorio;
            @Giratorio.performed += instance.OnGiratorio;
            @Giratorio.canceled += instance.OnGiratorio;
            @Direccion.started += instance.OnDireccion;
            @Direccion.performed += instance.OnDireccion;
            @Direccion.canceled += instance.OnDireccion;
            @BotonEscape.started += instance.OnBotonEscape;
            @BotonEscape.performed += instance.OnBotonEscape;
            @BotonEscape.canceled += instance.OnBotonEscape;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="JugadorActions" />
        private void UnregisterCallbacks(IJugadorActions instance)
        {
            @BotonDash.started -= instance.OnBotonDash;
            @BotonDash.performed -= instance.OnBotonDash;
            @BotonDash.canceled -= instance.OnBotonDash;
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
            @Interactuar.started -= instance.OnInteractuar;
            @Interactuar.performed -= instance.OnInteractuar;
            @Interactuar.canceled -= instance.OnInteractuar;
            @Ataque.started -= instance.OnAtaque;
            @Ataque.performed -= instance.OnAtaque;
            @Ataque.canceled -= instance.OnAtaque;
            @LargaDistancia.started -= instance.OnLargaDistancia;
            @LargaDistancia.performed -= instance.OnLargaDistancia;
            @LargaDistancia.canceled -= instance.OnLargaDistancia;
            @Giratorio.started -= instance.OnGiratorio;
            @Giratorio.performed -= instance.OnGiratorio;
            @Giratorio.canceled -= instance.OnGiratorio;
            @Direccion.started -= instance.OnDireccion;
            @Direccion.performed -= instance.OnDireccion;
            @Direccion.canceled -= instance.OnDireccion;
            @BotonEscape.started -= instance.OnBotonEscape;
            @BotonEscape.performed -= instance.OnBotonEscape;
            @BotonEscape.canceled -= instance.OnBotonEscape;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="JugadorActions.UnregisterCallbacks(IJugadorActions)" />.
        /// </summary>
        /// <seealso cref="JugadorActions.UnregisterCallbacks(IJugadorActions)" />
        public void RemoveCallbacks(IJugadorActions instance)
        {
            if (m_Wrapper.m_JugadorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="JugadorActions.AddCallbacks(IJugadorActions)" />
        /// <seealso cref="JugadorActions.RemoveCallbacks(IJugadorActions)" />
        /// <seealso cref="JugadorActions.UnregisterCallbacks(IJugadorActions)" />
        public void SetCallbacks(IJugadorActions instance)
        {
            foreach (var item in m_Wrapper.m_JugadorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JugadorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="JugadorActions" /> instance referencing this action map.
    /// </summary>
    public JugadorActions @Jugador => new JugadorActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Jugador" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="JugadorActions.AddCallbacks(IJugadorActions)" />
    /// <seealso cref="JugadorActions.RemoveCallbacks(IJugadorActions)" />
    public interface IJugadorActions
    {
        /// <summary>
        /// Method invoked when associated input action "BotonDash" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBotonDash(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Mover" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMover(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interactuar" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteractuar(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ataque" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAtaque(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LargaDistancia" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLargaDistancia(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Giratorio" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGiratorio(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Direccion" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDireccion(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BotonEscape" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBotonEscape(InputAction.CallbackContext context);
    }
}
